using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DALGen_Beta
{
    class PHPTemplate : DALTemplate
    {
        public override void GenerateContent(DALEntity entity, String outputFilePath)
        {
            /****************************
            // Create File
            ****************************/
            string filename = entity.EntityName;
            string textBuffer = String.Empty;
            string tempSprocName = String.Empty;
            string tempParamName = String.Empty;
            int count = 0;
            int listcount = 0;

            /****************************
            // In the MySQL Schema there is no DB schema prefix, thus we can consider the database name the schema
            ****************************/
            entity.SchemaName = entity.DatabaseName;

            string path = String.Format(@"{0}\\{1}.php", outputFilePath, filename);
            using (StreamWriter sw = new StreamWriter(path, false))
            {
                /****************************
                // Initial Comments
                ****************************/
                System.Reflection.Assembly assembly = System.Reflection.Assembly.GetExecutingAssembly();
                FileVersionInfo fvi = FileVersionInfo.GetVersionInfo(assembly.Location);
                string version = fvi.FileVersion;

                textBuffer = "<?php\n/*\n";
                textBuffer += "Author:\t\t\tThis code was generated by DALGen version " + version + " available at https://github.com/H0r53/DALGen \n";
                textBuffer += "Date:\t\t\t" + DateTime.Now.ToShortDateString() + "\n";
                textBuffer += "Description:\tCreates the DAL class for  " + entity.EntityName + " table and respective stored procedures\n";
                textBuffer += "\n";
                textBuffer += "*/\n";
                textBuffer += "\n";
                if (!String.IsNullOrWhiteSpace(entity.NamespaceName))
                    textBuffer += "namespace DALGen\\" + entity.EntityName + ";\n";
                sw.WriteLine(textBuffer);


                /****************************
                // Begin class definition and define properties
                ****************************/
                textBuffer = "\n";
                textBuffer += "class " + UpperFirst(entity.EntityName) + " {\n";
                textBuffer += "\n";
                textBuffer += "\t// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include(\"/outside-webroot/db_settings.php\");\n";
                textBuffer += "\tprotected static function getDbSettings() { return \"DAL/db_localsettings.php\"; }\n";
                textBuffer += "\n";
                textBuffer += "\t/******************************************************************/\n";
                textBuffer += "\t// Properties\n";
                textBuffer += "\t/******************************************************************/\n";
                textBuffer += "\n";
                foreach (var attribute in entity.Attributes)
                {
                    textBuffer += "\tprotected $" + attribute.AttributeName + ";\n";
                }
                sw.WriteLine(textBuffer);

                /****************************
                // Create Constructors
                ****************************/

                textBuffer = "\n";
                textBuffer += "\t/******************************************************************/\n";
                textBuffer += "\t// Constructors\n";
                textBuffer += "\t/******************************************************************/\n";
                textBuffer += "\tpublic function __construct() {\n";
                textBuffer += "\t\t$argv = func_get_args();\n";
                textBuffer += "\t\tswitch( func_num_args() ) {\n";
                textBuffer += "\t\t\tcase 0:\n";
                textBuffer += "\t\t\t\tself::__constructBase();\n";
                textBuffer += "\t\t\t\tbreak;\n";
                textBuffer += "\t\t\tcase 1:\n";
                textBuffer += "\t\t\t\tself::__constructPK( $argv[0] );\n";
                textBuffer += "\t\t\t\tbreak;\n";

                listcount = entity.Attributes.Count;                
                textBuffer += "\t\t\tcase " + listcount + ":\n";
                textBuffer += "\t\t\t\tself::__constructFull( ";
                for (count = 0; count < listcount; count++)
                {
                    textBuffer += "$argv[" + count + "]";
                    if (count < listcount - 1)
                        textBuffer += ", ";
                    else
                        textBuffer += " );\n" ;
                }
                textBuffer += "\t\t}\n";
                textBuffer += "\t}\n";
                sw.WriteLine(textBuffer);

                /****************************
                // Base Constructor
                ****************************/

                textBuffer = "\n";
                textBuffer += "\tpublic function __constructBase() {\n";
                foreach (var attribute in entity.Attributes)
                {
                    textBuffer += "\t\t$this->" + attribute.AttributeName + " = " + GetDataTypeDefaultValue(attribute.DataType,"\"\"") + ";\n";
                }
                textBuffer += "\t}\n";
                sw.WriteLine(textBuffer);

                /****************************
                // PK Constructor
                ****************************/

                textBuffer = "\n";
                textBuffer += "\tpublic function __constructPK($paramId) {\n";
                textBuffer += "\t\t$this->load($paramId);\n";
                textBuffer += "\t}\n";
                sw.WriteLine(textBuffer);

                /****************************
                // Full Constructor
                ****************************/

                textBuffer = "\n";
                textBuffer += "\tpublic function __constructFull(";
                count = 1;
                listcount = entity.Attributes.Count;
                foreach (var attribute in entity.Attributes)
                {
                    textBuffer += "$param" + UpperFirst(attribute.AttributeName);
                    if (count++ < listcount)
                        textBuffer += ",";
                    else
                        textBuffer += ") {\n";
                };
                foreach (var attribute in entity.Attributes)
                {
                    textBuffer += "\t\t$this->" + attribute.AttributeName + " = $param" + UpperFirst(attribute.AttributeName) + ";\n";
                };
                textBuffer += "\t}\n";
                sw.WriteLine(textBuffer);

                /****************************
                // Accessors / Mutators
                ****************************/

                textBuffer = "\n";
                textBuffer += "\t/******************************************************************/\n";
                textBuffer += "\t// Accessors / Mutators\n";
                textBuffer += "\t/******************************************************************/\n";
                textBuffer += "\n";
                foreach (var attribute in entity.Attributes)
                {
                    // Accessor
                    textBuffer += "\tpublic function get" + UpperFirst(attribute.AttributeName) + "(){\n";
                    textBuffer += "\t\treturn $this->" + attribute.AttributeName + ";\n";
                    textBuffer += "\t}\n";

                    // Mutator
                    textBuffer += "\tpublic function set" + UpperFirst(attribute.AttributeName) + "($value){\n";
                    textBuffer += "\t\t$this->" + attribute.AttributeName + " = $value;\n";
                    textBuffer += "\t}\n";
                };
                textBuffer += "\n";
                sw.WriteLine(textBuffer);

                /****************************
                // Public Methods
                ****************************/

                textBuffer = "\t/******************************************************************/\n";
                textBuffer += "\t// Public Methods\n";
                textBuffer += "\t/******************************************************************/\n";
                sw.WriteLine(textBuffer);

                /****************************
                // Load
                ****************************/

                textBuffer = "\n";
                textBuffer += "\tpublic function load($paramId) {\n";
                textBuffer += "\t\tinclude(self::getDbSettings());\n";
                textBuffer += "\t\t$conn = new mysqli($servername, $username, $password, $dbname);\n";
                textBuffer += "\t\t$stmt = $conn->prepare('CALL usp_" + entity.EntityName +  "_Load(?)');\n";
                textBuffer += "\t\t$stmt->bind_param('i', $paramId);\n";
                textBuffer += "\t\t$stmt->execute();\n";
                textBuffer += "\n";
                textBuffer += "\t\t$result = $stmt->get_result();\n";
                textBuffer += "\t\tif (!$result) die($conn->error);\n";
                textBuffer += "\n";
                textBuffer += "\t\twhile ($row = $result->fetch_assoc()) {\n";

                foreach (var attribute in entity.Attributes)
                    textBuffer += "\t\t $this->set" + UpperFirst(attribute.AttributeName) + "($row['" + attribute.AttributeName + "']);\n";

                textBuffer += "\t\t}\n";
                textBuffer += "\t}\n";
                sw.WriteLine(textBuffer);

                /****************************
                // Save
                ****************************/

                textBuffer = "\n";
                textBuffer += "\tpublic function save() {\n";
                textBuffer += "\t\tif ($this->get" + UpperFirst(entity.Attributes.Where(x => x.IsPrimaryKey).FirstOrDefault().AttributeName) + "() == 0)\n";
                textBuffer += "\t\t\t$this->insert();\n";
                textBuffer += "\t\telse\n";
                textBuffer += "\t\t\t$this->update();\n";
                textBuffer += "\t}\n";
                sw.WriteLine(textBuffer);

                /****************************
                // Private Methods
                ****************************/

                textBuffer = "\t/******************************************************************/\n";
                textBuffer += "\t// Private Methods\n";
                textBuffer += "\t/******************************************************************/\n";
                textBuffer += "\n";
                sw.WriteLine(textBuffer);

                /****************************
                // Insert
                ****************************/

                textBuffer = "\n";
                textBuffer += "\tprivate function insert() {\n";
                textBuffer += "\t\tinclude(self::getDbSettings());\n";
                textBuffer += "\t\t$conn = new mysqli($servername, $username, $password, $dbname);\n";
                textBuffer += "\t\t$stmt = $conn->prepare('CALL usp_" + entity.EntityName + "_Add(";
                listcount = entity.Attributes.Where(x => !x.IsPrimaryKey).ToList().Count;
                for (count = 0; count < listcount; count++)
                {
                    textBuffer += "?";
                    if (count < listcount - 1)
                        textBuffer += ",";
                    else
                        textBuffer += ")');\n";
                }
                count = 1;
                foreach(var attribute in entity.Attributes.Where(x => !x.IsPrimaryKey).ToList())
                {
                    textBuffer += "\t\t$arg" + count++ + " = $this->get" + UpperFirst(attribute.AttributeName) + "();\n";
                }
                textBuffer += "\t\t$stmt->bind_param('";
                foreach (var attribute in entity.Attributes.Where(x => !x.IsPrimaryKey).ToList())
                {
                    textBuffer += GetPHPBindParam(attribute.DataType);
                }
                textBuffer += "',";
                count = 1;
                foreach (var attribute in entity.Attributes.Where(x => !x.IsPrimaryKey).ToList())
                {
                    textBuffer += "$arg" + count;
                    if (count++ < listcount)
                        textBuffer += ",";
                    else
                        textBuffer += ");\n";
                }
                textBuffer += "\t\t$stmt->execute();\n";
                textBuffer += "\n";
                textBuffer += "\t\t$result = $stmt->get_result();\n";
                textBuffer += "\t\tif (!$result) die($conn->error);\n";
                textBuffer += "\t\twhile ($row = $result->fetch_assoc()) {\n";
                textBuffer += "\t\t\t// By default, the DALGen generated INSERT procedure returns the scope identity as id\n";
                textBuffer += "\t\t\t$this->load($row['id']);\n";
                textBuffer += "\t\t}\n";
                textBuffer += "\t}\n";
                sw.WriteLine(textBuffer);

                /****************************
                // Update
                ****************************/

                textBuffer = "\n";
                textBuffer += "\tprivate function update() {\n";
                textBuffer += "\t\tinclude(self::getDbSettings());\n";
                textBuffer += "\t\t$conn = new mysqli($servername, $username, $password, $dbname);\n";
                textBuffer += "\t\t$stmt = $conn->prepare('CALL usp_" + entity.EntityName + "_Update(";
                listcount = entity.Attributes.Count;
                for (count = 0; count < listcount; count++)
                {
                    textBuffer += "?";
                    if (count < listcount - 1)
                        textBuffer += ",";
                    else
                        textBuffer += ")');\n";
                }
                count = 1;
                foreach (var attribute in entity.Attributes)
                {
                    textBuffer += "\t\t$arg" + count++ + " = $this->get" + UpperFirst(attribute.AttributeName) + "();\n";
                }
                textBuffer += "\t\t$stmt->bind_param('";
                foreach (var attribute in entity.Attributes)
                {
                    textBuffer += GetPHPBindParam(attribute.DataType);
                }
                textBuffer += "',";
                count = 1;
                foreach (var attribute in entity.Attributes)
                {
                    textBuffer += "$arg" + count;
                    if (count++ < listcount)
                        textBuffer += ",";
                    else
                        textBuffer += ");\n";
                }
                textBuffer += "\t\t$stmt->execute();\n";
                textBuffer += "\t}\n";
                sw.WriteLine(textBuffer);

                /****************************
                // Define SetNullValue function (for use with Search method)
                ****************************/

                textBuffer = "\tprivate static function setNullValue($value){\n";
                textBuffer += "\t\tif ($value == \"\")\n";
                textBuffer += "\t\t\treturn null;\n";
                textBuffer += "\t\telse\n";
                textBuffer += "\t\t\treturn $value;\n";
                textBuffer += "\t}\n";
                sw.WriteLine(textBuffer);

                /****************************
                // Static Methods
                ****************************/

                textBuffer = "\t/******************************************************************/\n";
                textBuffer += "\t// Static Methods\n";
                textBuffer += "\t/******************************************************************/\n";
                textBuffer += "\n";
                sw.WriteLine(textBuffer);

                /****************************
                // Load All
                ****************************/

                textBuffer = "\n";
                textBuffer += "\tpublic static function loadall() {\n";
                textBuffer += "\t\tinclude(self::getDbSettings());\n";
                textBuffer += "\t\t$conn = new mysqli($servername, $username, $password, $dbname);\n";
                textBuffer += "\t\t$stmt = $conn->prepare('CALL usp_" + entity.EntityName + "_LoadAll()');\n";
                textBuffer += "\t\t$stmt->execute();\n";
                textBuffer += "\n";
                textBuffer += "\t\t$result = $stmt->get_result();\n";
                textBuffer += "\t\tif (!$result) die($conn->error);\n";
                textBuffer += "\t\tif ($result->num_rows > 0) {\n";
                textBuffer += "\t\t\t$arr = array();\n";
                textBuffer += "\t\t\twhile ($row = $result->fetch_assoc()) {\n";

                textBuffer += "\t\t\t\t$" + LowerFirst(entity.EntityName) + " = new " + UpperFirst(entity.EntityName) + "(";
                count = 0;
                listcount = entity.Attributes.Count;
                foreach(var attribute in entity.Attributes)
                {
                    textBuffer += "$row['" + attribute.AttributeName + "']";
                    if (++count < listcount)
                        textBuffer += ",";
                    else
                        textBuffer += ");\n";
                }
                textBuffer += "\t\t\t\t$arr[] = $teamMember;\n";
                textBuffer += "\t\t\t}\n";
                textBuffer += "\t\t\treturn $arr;\n";
                textBuffer += "\t\t}\n";
                textBuffer += "\t\telse {\n";
                textBuffer += "\t\t\tdie(\"The query yielded zero results.No rows found.\");\n";
                textBuffer += "\t\t}\n";
                textBuffer += "\t}\n";
                sw.WriteLine(textBuffer);

                /****************************
                // Remove
                ****************************/

                textBuffer = "\n";
                textBuffer += "\tpublic static function remove($paramId) {\n";
                textBuffer += "\t\tinclude(self::getDbSettings());\n";
                textBuffer += "\t\t$conn = new mysqli($servername, $username, $password, $dbname);\n";
                textBuffer += "\t\t$stmt = $conn->prepare('CALL usp_" + entity.EntityName + "_Remove(?)');\n";
                textBuffer += "\t\t$stmt->bind_param('i', $paramId);\n";
                textBuffer += "\t\t$stmt->execute();\n";
                textBuffer += "\t}\n";
                sw.WriteLine(textBuffer);

                /****************************
                // Search
                ****************************/

                textBuffer = "\n";
                textBuffer += "\tpublic static function search(";
                count = 0;
                listcount = entity.Attributes.Count;
                foreach(var attribute in entity.Attributes)
                {
                    textBuffer += "$param" + UpperFirst(attribute.AttributeName);
                    if (++count < listcount)
                        textBuffer += ",";
                    else
                        textBuffer += ") {\n";
                }

                textBuffer += "\t\tinclude(self::getDbSettings());\n";
                textBuffer += "\t\t$conn = new mysqli($servername, $username, $password, $dbname);\n";
                textBuffer += "\t\t$stmt = $conn->prepare('CALL usp_" + entity.EntityName + "_Search(";
                listcount = entity.Attributes.Count;
                for (count = 0; count < listcount; count++)
                {
                    textBuffer += "?";
                    if (count < listcount - 1)
                        textBuffer += ",";
                    else
                        textBuffer += ")');\n";
                }
                count = 1;
                foreach (var attribute in entity.Attributes)
                {
                    textBuffer += "\t\t$arg" + count++ + " = " + UpperFirst(entity.EntityName) + "::setNullValue($param" + UpperFirst(attribute.AttributeName) + ");\n";
                }
                textBuffer += "\t\t$stmt->bind_param('";
                foreach (var attribute in entity.Attributes)
                {
                    textBuffer += GetPHPBindParam(attribute.DataType);
                }
                textBuffer += "',";
                count = 1;
                foreach (var attribute in entity.Attributes)
                {
                    textBuffer += "$arg" + count;
                    if (count++ < listcount)
                        textBuffer += ",";
                    else
                        textBuffer += ");\n";
                }
                textBuffer += "\t\t$stmt->execute();\n";
                textBuffer += "\n";
                textBuffer += "\t\t$result = $stmt->get_result();\n";
                textBuffer += "\t\tif (!$result) die($conn->error);\n";
                textBuffer += "\t\tif ($result->num_rows > 0) {\n";
                textBuffer += "\t\t\t$arr = array();\n";
                textBuffer += "\t\t\twhile ($row = $result->fetch_assoc()) {\n";

                textBuffer += "\t\t\t\t$" + LowerFirst(entity.EntityName) + " = new " + UpperFirst(entity.EntityName) + "(";
                count = 0;
                listcount = entity.Attributes.Count;
                foreach (var attribute in entity.Attributes)
                {
                    textBuffer += "$row['" + attribute.AttributeName + "']";
                    if (++count < listcount)
                        textBuffer += ",";
                    else
                        textBuffer += ");\n";
                }
                textBuffer += "\t\t\t\t$arr[] = $teamMember;\n";
                textBuffer += "\t\t\t}\n";
                textBuffer += "\t\t\treturn $arr;\n";
                textBuffer += "\t\t}\n";
                textBuffer += "\t\telse {\n";
                textBuffer += "\t\t\tdie(\"The query yielded zero results.No rows found.\");\n";
                textBuffer += "\t\t}\n";
                textBuffer += "\t}\n";
                textBuffer += "}";
                sw.WriteLine(textBuffer);

                sw.Close();
            }
        }

        /// <summary>
        /// Returns a char defining which bind_param value to use for the given datatype
        /// </summary>
        /// <param name="dt"></param>
        /// <returns>        /// 
        /// i	corresponding variable has type integer
        /// d   corresponding variable has type double
        /// s   corresponding variable has type string
        /// b   corresponding variable is a blob and will be sent in packets
        /// </returns>
        private char GetPHPBindParam(DataType dt)
        {
            char retVal = 's'; // default
            switch (dt)
            {
                case DataType.BIGINT:
                case DataType.SMALLINT:
                case DataType.TINYINT:
                case DataType.BIT:
                case DataType.INT:
                case DataType.MEDIUMINT:
                case DataType.ENUM:
                    retVal = 'i';
                    break;

                case DataType.DECIMAL:
                case DataType.MONEY:
                case DataType.NUMERIC:
                case DataType.SMALLMONEY:
                case DataType.FLOAT:
                case DataType.REAL:
                case DataType.DOUBLE:
                    retVal = 'd';
                    break;

                case DataType.CHAR:
                case DataType.VARCHAR:
                case DataType.NCHAR:
                case DataType.NVARCHAR:
                case DataType.DATE:
                case DataType.DATETIME:
                case DataType.DATETIME2:
                case DataType.DATETIMEOFFSET:
                case DataType.SMALLDATETIME:
                case DataType.TEXT:
                case DataType.NTEXT:
                case DataType.TINYTEXT:
                case DataType.MEDIUMTEXT:
                case DataType.LONGTEXT:
                case DataType.SET:
                case DataType.TIMESTAMP:
                case DataType.TIME:
                case DataType.YEAR:
                    retVal = 's';
                    break;

                case DataType.BLOB:
                case DataType.MEDIUMBLOB:
                case DataType.LONGBLOB:
                case DataType.IMAGE:
                case DataType.BINARY:
                case DataType.VARBINARY:
                    retVal = 'b';
                    break;
            }
            return retVal;
        }
    }
}
